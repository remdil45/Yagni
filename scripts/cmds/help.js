const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");
const { getPrefix } = global.utils;
const { commands, aliases } = global.GoatBot;
const doNotDelete = "üéÄ | ùë±ùë∂ùí¥ùë≥ùíÄùëµùë¨ ùë®ùë∞"; // changing this won't change the goatbot V2 of list cmd it is just a decoy

module.exports = {
  config: {
    name: "help",
    version: "1.17",
    author: "kshitiz", // original author HASSAN 
    countDown: 5,
    role: 0,
    shortDescription: {
      en: "View command usage and list all commands directly",
    },
    longDescription: {
      en: "View command usage and list all commands directly",
    },
    category: "Info üìú",
    guide: {
      en: "{pn} / help cmdName ",
    },
    priority: 1,
  },

  onStart: async function ({ message, args, event, threadsData, role }) {
    const { threadID } = event;
    const threadData = await threadsData.get(threadID);
    const prefix = getPrefix(threadID);

    if (args.length === 0) {
      const categories = {};
      let msg = "";

      msg += `Command List:\n`; // replace with your name 

      for (const [name, value] of commands) {
        if (value.config.role > 1 && role < value.config.role) continue;

        const category = value.config.category || "Uncategorized";
        categories[category] = categories[category] || { commands: [] };
        categories[category].commands.push(name);
      }

      Object.keys(categories).forEach((category) => {
        if (category !== "info") {
          msg += `\n\n„Äé  ${category.toUpperCase()}  „Äè\n`;

          const names = categories[category].commands.sort();
          for (let i = 0; i < names.length; i += 3) {
            const cmds = names.slice(i, i + 3).map((item) => ` ${boldSerif(item)},`);
            msg += ` ${cmds.join(" ".repeat(Math.max(1, 10 - cmds.join("").length)))}`;
          }

          msg += ``;
        }
      });

      const totalCommands = commands.size;
      msg += ``;
      msg += `\n\n‚ú® | Aadi'ùíî ùë®ùíäùë©ùíêùëª\nùóßùóºùòÅùóÆùóπ ùóñùóºùó∫ùó∫ùóÆùóªùó±ùòÄ ¬ª ${totalCommands}`; // it's not a decoy so change it if you want 

      await message.reply({
        body: msg
      });
    } else {
      const commandName = args[0].toLowerCase();
      const command = commands.get(commandName) || commands.get(aliases.get(commandName));

      if (!command) {
        await message.reply(`Command "${commandName}" not found.`);
      } else {
        const configCommand = command.config;
        const roleText = roleTextToString(configCommand.role);
        const author = configCommand.author || "Unknown";

        const longDescription = configCommand.longDescription ? configCommand.longDescription.en || "No description" : "No description";

        const guideBody = configCommand.guide?.en || "No guide available.";
        const usage = guideBody.replace(/{p}/g, prefix).replace(/{n}/g, configCommand.name);

        const response = `„Äå ùóñùó¢ùó†ùó†ùóîùó°ùóó ùóõùóòùóüùó£ „Äç\n\nùñ≠ùñ∫ùóÜùñæ ¬ª ${configCommand.name} \nùñ†ùóéùóçùóÅùóàùóã ¬ª ${author} \nùñ†ùóÖùóÇùñ∫ùóåùñæùóå ¬ª ${configCommand.aliases ? configCommand.aliases.join() : "Do Not Have"} \nùñ£ùñæùóåùñºùóãùóÇùóâùóçùóÇùóàùóá ¬ª ${longDescription} \nùñ¥ùóåùñ∫ùóÄùñæ ¬ª ${usage}`;

        await message.reply(response);
      }
    }
  },
};

function boldSerif(text) {
  const boldSerifMapping = {
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£', 'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠', 'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
    'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ', 'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì', 'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô'
  };
  return text.split('').map(c => boldSerifMapping[c] || c).join('');
}

function roleTextToString(roleText) {
  switch (roleText) {
    case 0:
      return "0 (All users)";
    case 1:
      return "1 (Group administrators)";
    case 2:
      return "2 (Admin bot)";
    default:
      return "Unknown role";
  }
}